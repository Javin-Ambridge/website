  //This method solves for the N-Queens problem, it takes in the size of the array (which is defined globally, note the array has to be
  //   two dimensional and a square), and than it places N queens onto the array such that no queen has any contact with any other
  //   Queen, this algorithm uses backtracking.
  //Note: x,y should start at 0,0 just to make sure your not missing a possible spot.
  //Note: I am not showing the upOrDown, sideways and diagonal methods, because they are pretty easy to replicate, it returns true if
  //      there is another queen in the way.
  private static boolean solve(int x, int y, int size_x, int size_y){
    while(true){
      if(trace)
        System.out.println("x is: " + x + ", y is: " + y);
      if(x == size_x || y == size_y)
        return false;
      if(x == (size_x - 1) && y == (size_y - 1)){
        return true;
      }
      if(array[x][y] == 0){
        if(!upOrDown(x,y, size_y) && !sideways(x,y, size_x) && !diagonal(x, y, size_x, size_y)){
          if(trace)
            System.out.println("setting this place to 1");
          array[x][y] = 1;
          if(solve(x + 1, 0, size_x, size_y) == false){
            if(trace)
              System.out.println("removing at x: " + x + ", y: " + y);
            array[x][y] = 0;
            if(y + 1 == (size_y - 1) && x == (size_x - 1)){
              if(!upOrDown(x,y + 1, size_y) && !sideways(x,y + 1, size_x) && !diagonal(x, y + 1, size_x, size_y)){
                array[x][y + 1] = 1;
                return true;
              }else
                return false;
            }
            else{
              y = y + 1;
              continue;
            }
          }else
            return true;
        }else{
          if(y + 1 == (size_y - 1) && x == (size_x - 1)){
            if(!upOrDown(x,y + 1, size_y) && !sideways(x,y + 1, size_x) && !diagonal(x, y + 1, size_x, size_y)){
              array[x][y + 1] = 1;
              return true;
            }else
              return false;

          }
          else{
            y = y + 1;
            continue;
          }
        }
      }
    }
  }